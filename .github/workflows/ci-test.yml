name: CI/CD pipeline

on:
  push:
    branches:
      - main
      - release
      - develop
  pull_request:
    branches:
      - main
      - release
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      MONGO_URI: ${{ secrets.MONGO_URI }}
      CONVENTION_API: ${{ secrets.CONVENTION_API }}
      
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔧 Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: 📦 Install dependencies
        run: bun install

      - name: 🔍 Run tests
        run: bun test || echo "No test command found, skipping tests"

      - name: 🚀 Start application in background
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          CONVENTION_API: ${{ secrets.CONVENTION_API }}
        run: bun run dev & echo $! > bun_dev_pid

      - name: ⏳ Wait for application startup
        run: sleep 15  # Espera 10 segundos para verificar que el servidor arranca

      - name: 🛑 Stop application
        run: kill $(cat bun_dev_pid) || echo "Process already stopped"
      
      - name: 🧹 Lint code
        run: bun run lint

  deploy-release:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/release'
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔍 Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $(echo $AWS_SECRET_ACCESS_KEY | sed 's/./*/g')"
          echo "AWS_REGION: $AWS_REGION"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔐 Logout de Docker (Limpieza previa)
        run: docker logout public.ecr.aws || true

      - name: 🔐 Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: false
          registry-type: public

      - name: 📌 Definir variable IMAGE_TAG


        run: echo "IMAGE_TAG=$(date +%Y%m%d%H)" >> $GITHUB_ENV

      - name: 🛠 Build and Tag Docker Image for PRUEBAS
        run: |
          echo "Tag generado: $IMAGE_TAG"
          docker build -t ${{ secrets.AWS_ECR_URI }}:test-$IMAGE_TAG .
          docker tag ${{ secrets.AWS_ECR_URI }}:test-$IMAGE_TAG ${{ secrets.AWS_ECR_URI }}:latest-test

      - name: 🚀 Push Docker Image to ECR (PRUEBAS)
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}:test-$IMAGE_TAG
          docker push ${{ secrets.AWS_ECR_URI }}:latest-test

  deploy-prod:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v3

      - name: 🔍 Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $(echo $AWS_SECRET_ACCESS_KEY | sed 's/./*/g')"
          echo "AWS_REGION: $AWS_REGION"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🔐 Logout de Docker (Limpieza previa)
        run: docker logout public.ecr.aws || true

      - name: 🔐 Login to AWS ECR
        uses: aws-actions/amazon-ecr-login@v1
        
        with:
          mask-password: false
          registry-type: public

      - name: 📌 Definir variable IMAGE_TAG
        run: echo "IMAGE_TAG=$(date +%Y%m%d%H)" >> $GITHUB_ENV

      - name: 🛠 Build and Tag Docker Image for PRODUCCIÓN
        run: |
          echo "Tag generado: $IMAGE_TAG"
          docker build -t ${{ secrets.AWS_ECR_URI }}:prod-$IMAGE_TAG .
          docker tag ${{ secrets.AWS_ECR_URI }}:prod-$IMAGE_TAG ${{ secrets.AWS_ECR_URI }}:latest-prod

      - name: 🚀 Push Docker Image to ECR (PRODUCCIÓN)
        run: |
          docker push ${{ secrets.AWS_ECR_URI }}:prod-$IMAGE_TAG
          docker push ${{ secrets.AWS_ECR_URI }}:latest-prod
